/**
 * #  Service
 * Block stream messages that report the results of transactions handled
 * by the `smart contract` service.
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */
syntax = "proto3";

package com.hedera.hapi.block.stream.output;

/*
 * Copyright (C) 2024 Hedera Hashgraph, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "com.hedera.hapi.block.stream.output.protoc";
// <<<pbj.java_package = "com.hedera.hapi.block.stream.output">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "contract_call_local.proto";

/**
 * Block Stream data for a `contractCallMethod` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message ContractCallOutput {
     /**
     * A result for a Contract Call Transaction execution, either a create or call.
     * <p>
     * This field SHALL contain all of the data produced by the contract
     * create transaction as well as basic accounting results.
     */
     proto.ContractFunctionResult contract_function_result = 1;
 
     /**
     * The inter contract interaction details. This represents the internal EVM message frames.
     */
     repeated ContractAction contract_actions = 2;
}

/**
 * Block Stream data for a `createContract` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message ContractCreateOutput { 
     /**
     * Contract bytecode during deployment
     */
     bytes initcode = 1;
 
     /**
     * Contract bytecode after deployment
     */
     bytes runtime_bytecode = 2;

     /**
     * A result for an Contract Create Transaction execution, either a create or call.
     * <p>
     * This field SHALL contain all of the data produced by the contract
     * create transaction as well as basic accounting results.
     */
     proto.ContractFunctionResult contract_function_result = 3;
 
     /**
     * The inter contract interaction details. This represents the internal EVM message frames.
     */
     repeated proto.ContractAction contract_actions = 4;
}

// no evm exec, only modified entity
/**
 * Block Stream data for a `deleteContract` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message ContractDeleteOutput {}

/**
 * Block Stream data for a contract `systemUndelete` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message ContractSystemUnDeleteOutput {}

/**
 * Block Stream data for a contract `systemDelete` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message ContractSystemDeleteOutput {}

// no evm exec, only modified entity
/**
 * Block Stream data for a `updateContract` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
 message ContractUpdateOutput {}
 
/**
 * Block Stream data for a `callEthereum` transaction.
 *
 * This message SHALL NOT duplicate information already contained in
 * the original transaction.
 */
message EthereumOutput {
    /**
     * An ethereum hash value.
     * <p>
     * This SHALL be a keccak256 hash of the ethereumData.
     */
    bytes ethereum_hash = 1;

    /**
    * A result for an Ethereum Transaction execution, either a create or call.
    * <p>
    * This field SHALL contain all of the data produced by the contract
    * create transaction as well as basic accounting results.
    */
    proto.ContractFunctionResult contract_function_result = 2;

    /**
    * Contract bytecode during deployment
    */
    bytes initcode = 3;

    /**
    * Contract bytecode after deployment
    */
    bytes runtime_bytecode = 4;

    /**
    * The inter contract interaction details. This represents the internal EVM message frames.
    */
    repeated ContractAction contract_actions = 5;
}
