/**
 * # Block Service
 * The Service API exposed by the Block Nodes.
 *
 * ### Keywords
 * The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
 * "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
 * document are to be interpreted as described in
 * [RFC2119](https://www.ietf.org/rfc/rfc2119) and clarified in
 * [RFC8174](https://www.ietf.org/rfc/rfc8174).
 */
syntax = "proto3";

package com.hedera.hapi.block;

// SPDX-License-Identifier: Apache-2.0
option java_package = "com.hedera.hapi.block.protoc";
// <<<pbj.java_package = "com.hedera.hapi.block">>> This comment is special code for setting PBJ Compiler java package
option java_multiple_files = true;

import "services/basic_types.proto";
import "block/stream/block.proto";
import "block/stream/block_item.proto";

/**
 * Publish a stream of block items.
 *
 * Each request in the stream MUST contain at least one `BlockItem`.<br/>
 * Each request MAY contain more than one `BlockItem`.<br/>
 * A single request MUST NOT contain `BlockItem`s from more than one block.<br/>
 * Each request MAY contain a variable number of `BlockItem`s.<br/>
 * Each Block MUST begin with a single `BlockHeader` block item.<br/>
 * If a `BlockHeader` is present in a request, it MUST be the first `BlockItem`
 * in the `block_items` list.<br/>
 * The Block-Node SHALL append each `BlockItem` to an internal structure
 * to reconstruct full blocks.<br/>
 * The Block-Node MUST verify the block proof for each block before sending a
 * response message acknowledging that block.<br/>
 * Each Block MUST end with a single `BlockProof` block item.<br/>
 * If a `BlockProof` is present in a request, it MUST be the last `BlockItem`
 * in the `block_items` list.<br/>
 * The Block-Node MUST verify each Block using the `BlockProof` to
 * ensure all data was received and processed correctly.
 */
message PublishStreamRequest {
    oneof request {
        /**
         * A stream item containing one or more `BlockItem`s.
         * <p>
         * The full stream SHALL consist of many `block_items` messages
         * followed by a single `status` message.
         */
        BlockItemSet block_items = 1;
    }
}

/**
 * An enumeration indicating why a Publisher ended a stream.
 *
 * This enumeration describes the reason a block stream
 * (sent via `publishBlockStream`) was ended by the Publisher.
 */
enum PublishStreamEndCode {
    /**
     * An "unset value" flag, this value SHALL NOT be used.<br/>
     * This status indicates the server software failed to set a
     * status, and SHALL be considered a software defect.
     */
    STREAM_END_UNKNOWN = 0;

    /**
     * The Publisher reached a reset point.<br/>
     * No errors occurred and the source Block-Node orderly ended the stream.
     *
     * Publishers SHOULD use this code to end a stream and restart
     * occasionally. Occasionally resetting the stream increases stability and
     * allows for routine network configuration changes.
     */
    STREAM_END_RESET = 1;

    /**
     * The delay between items was too long.<br/>
     * The destination system did not timely acknowledge a block.
     * <p>
     * The source SHALL start a new stream before the failed block.
     */
    STREAM_END_TIMEOUT = 2;

    /**
     * The Publisher encountered an error.<br/>
     * The Publisher encountered an internal error and must try again later.
     * <p>
     * Publishers that encounter internal logic errors, find themselves
     * "behind" the network, or otherwise detect an unexpected situation MUST
     * send this code and restart the stream before the failed block.
     */
    STREAM_END_ERROR = 3;

    /**
     * The Block-Node is too far behind to catch up directly.<br/>
     * The Block-Node responded to a block header with "BEHIND" and is
     * too far behind the Publisher.
     * <p>
     * The Block-Node MUST recover and "catch up" from another trustworthy
     * Block-Node.<br/>
     * The Publisher MAY stream items to a different Block-Node.<br/>
     * The Publisher MAY resume streaming to this Block-Node later.<br/>
     * The `EndOfStream` message MUST include the earliest and latest blocks
     * currently available from the Publisher.<br/>
     * The Block-Node SHOULD attempt to "catch up" to the _latest_ block
     * available from the Publisher.
     */
    STREAM_END_TOO_FAR_BEHIND = 4;
}

/**
 * A wrapper around a repeated BlockItem.<br/>
 * This message is required so that we can include ordered lists of block
 * items as `oneof` alternatives in streams.
 *
 * Each `BlockItemSet` MUST contain at least one `BlockItem`,
 * and MAY contain up to one full block.<br/>
 * A single `BlockItemSet` SHALL NOT contain block items from
 * more than one block.<br/>
 * If a `BlockHeader` is present in a `BlockItemSet`, that item
 * MUST be the first item in the list.<br/>
 * If a `BlockProof` is present in a `BlockItemSet`, that item
 * MUST be the last item in the list.
 */
message BlockItemSet {
    /**
     * An ordered list of `BlockItem`s.<br/>
     * This list supports sending block items to subscribers in batches
     * for greater channel efficiency.
     */
    repeated com.hedera.hapi.block.stream.BlockItem block_items = 1;
}

/**
 * A response to writing a block stream.
 *
 * This message is sent in response to each Block in a block stream sent
 * to a Block-Node. The block stream is sent as a stream of messages, and each
 * message MAY be acknowledged with a message of this type.<br/>
 * Each `BlockItem` MAY be acknowledged with an `Acknowledgement`
 * response. Item acknowledgement is an OPTIONAL feature.<br/>
 * Each completed block SHALL be acknowledged with an `Acknowledgement`
 * response. Block acknowledgement is a REQUIRED feature.<br/>
 * A final response SHALL be sent with an `EndOfStream` status result after
 * the last block stream item is received, or when the Block-Node must end the
 * stream for any reason.<br/>
 * At any time, a Block-Node MAY send a `SkipBlock` response to request that
 * the Publisher skip the current block and resume with the next. When a
 * Block-Node sends a `SkipBlock`, that Block-Node SHALL subsequently send
 * an `Acknowledgement` for the same block, or SHALL send a `ResendBlock`
 * message.
 * If a failure is detected (which may include a block or block item that
 * fails validation) an `EndOfStream` response SHALL be sent with a
 * relevant error status.
 */
message PublishStreamResponse {
    oneof response {
        /**
         * A response sent to acknowledge successful receipt of a block.
         */
        Acknowledgement acknowledgement = 1;

        /**
         * A response sent to request the Publisher end the current stream.
         */
        EndOfStream end_stream = 2;

        /**
         * A response sent to request the Publisher skip the current block.
         */
        SkipBlock skip_block = 3;

        /**
         * A response sent to request the Publisher resend a skipped block.
         */
        ResendBlock resend_block = 4;
    }

    /**
     * A response to acknowledge receipt and verification of a single item
     * or full block.
     */
    message Acknowledgement {
        /**
         * A response type to acknowledge a full and complete block.
         * <p>
         * All Block-Nodes SHOULD acknowledge each block.
         */
        BlockAcknowledgement block_ack = 1;
    }

    /**
     * Acknowledgement of a full block.<br/>
     * This message is a necessary part of the block streaming protocol.
     *
     * This response SHALL be sent after a block state proof item is
     * received and verified.<br/>
     * The Block-Node SHALL send exactly one `BlockAcknowledgement` for
     * each successful block.
     */
    message BlockAcknowledgement {
        /**
         * A block number number of the acknowledged block.
         * <p>
         * A Publisher SHOULD verify that this value matches the block sent.
         */
        uint64 block_number = 1;

        /**
         * A hash of the virtual merkle root for the block.
         * <p>
         * This SHALL be the hash calculated by the Block-Node for the
         * root node of the virtual merkle tree that is signed by the source
         * system to validate the block.
         */
        bytes block_root_hash = 2;

        /**
         * A flag indicating that the received block duplicates an
         * existing block.
         * <p>
         * If a Publisher receives acknowledgement with this flag set
         * true the Publisher MAY end the stream.<br/>
         * The `block_number` returned SHALL be the last block known and
         * verified by the Block-Node.<br/>
         * The Publisher MAY resume publishing immediately after the indicated
         * block.
         */
        bool block_already_exists = 3;
    }

    /**
     * Message indicating the Publisher should skip the current block.
     *
     * Block-Nodes SHOULD only skip a block if that block is currently being
     * received from another source.<br/>
     * Publishers MUST stop sending the current block and resume with
     * the block header for the next block, or else end the stream.<br/>
     * A Publisher that receives this message SHALL subsequently receive an
     * acknowledgement for the skipped block or SHALL receive a `ResendBlock`
     * message.<br/>
     * A Publisher asked to skip a block SHOULD NOT delay any subsequent
     * block, but should send that block as soon as it is available.<br/>
     * A Publisher MAY be asked to skip multiple blocks in succession, but
     * SHOULD interpret that as the presence of another Publisher with a
     * lower latency connection.<br/>
     * A Publisher MAY choose to end the stream and send the block to a
     * different Block-Node, rather than skip sending the block to the
     * current Block-Node.
     */
    message SkipBlock {
        /**
         * The number of the _unverified_ block to skip.
         * <p>
         * This MUST match the block number of the `BlockHeader` most recently
         * sent by the Publisher.
         */
        uint64 block_number = 2;
    }

    /**
     * Message indicating the Publisher must resend from a specified block.
     * A Publisher might resend the block, if it has that block available,
     * or it might choose to end the stream if it has already received
     * acknowledgement from a different trustworthy Block-Node.
     *
     * On receiving this message, a Publisher MUST resume sending blocks at
     * the block number indicated, or else end the stream.<br/>
     * This message SHALL only be sent following a `SkipBlock` message for a
     * block that has not been acknowledged.<br/>
     * A Block-Node SHALL NOT send a `ResendBlock` message for any block that
     * is already acknowledged.<br/>
     * A Publisher MAY choose to end the stream rather than resend the
     * the requested block.
     */
    message ResendBlock {
        /**
         * The number of the _unverified_ block to re-send.
         * <p>
         * This SHALL be the block number one greater than the last block
         * this Block-Node has successfully stored and verified.
         */
        uint64 block_number = 2;
    }

    /**
     * A message sent to end a stream.
     *
     * This response message SHALL be sent from a Block-Node to a block
     * stream Publisher when a `publishBlockStream` stream ends.<br/>
     * This message SHALL be sent exactly once for each `publishBlockStream`
     * call.<br/>
     * The Publisher SHALL cease sending block items upon receiving
     * this response, and MAY determine the ending state of the stream from
     * the `status` enumeration and the `block_number` returned.<br/>
     * A Publisher SHOULD verify that the `block_number` value matches the
     * last block sent, and SHOULD resend one or more blocks if the value
     * here does not match the expected value.
     */
    message EndOfStream {
        /**
         * A response code.
         * <p>
         * This code indicates the reason the stream ended.<br/>
         * This value MUST be set to a non-default value.
         */
        PublishStreamResponseCode status = 1;

        /**
         * The number of the last completed and _verified_ block.
         * <p>
         * Block-Nodes SHOULD only end a stream after a block state proof to avoid
         * the need to resend items.<br/>
         * If status is a failure code, the Publisher MUST start a new
         * stream at the beginning of the first block _following_ this number
         * (e.g. if this is 91827362983, then the new stream must start with
         * the _header_ for block 91827362984).
         */
        uint64 block_number = 2;
    }
}

/**
 * An enumeration indicating the status of this request.
 *
 * This enumeration SHALL describe the reason a block stream
 * (sent via `publishBlockStream`) ended.
 */
enum PublishStreamResponseCode {
    /**
     * An "unset value" flag, this value SHALL NOT be used.<br/>
     * This status indicates the server software failed to set a
     * status, and SHALL be considered a software defect.
     */
    STREAM_ITEMS_UNKNOWN = 0;

    /**
     * The request succeeded.<br/>
     * No errors occurred and the receiving Block-Node orderly ended the stream.
     * <p>
     * The Publisher MAY start a new stream beginning with the next block.
     */
    STREAM_ITEMS_SUCCESS = 1;

    /**
     * The delay between items was too long.
     * <p>
     * The source MUST start a new stream before the failed block.
     */
    STREAM_ITEMS_TIMEOUT = 2;

    /**
     * An item was received out-of-order.<br/>
     * This might be two headers without a proof between them, or similar.
     * <p>
     * The source MUST start a new stream before the failed block.
     */
    STREAM_ITEMS_OUT_OF_ORDER = 3;

    /**
     * A block state proof item could not be validated.<br/>
     * The source MUST start a new stream before the failed block.
     */
    STREAM_ITEMS_BAD_STATE_PROOF = 4;

    /**
     * The Block-Node is "behind" the Publisher.<br/>
     * Ths Publisher has sent a block later than this Block-Node
     * can process. The Publisher may retry by sending blocks immediately
     * following the `block_number` returned, or may connect
     * to another Block-Node.
     * <p>
     * Block-Nodes that are "behind" SHOULD attempt to "catch up" by requesting
     * blocks from another Block-Node or other source of recent historical
     * block stream data.
     */
    STREAM_ITEMS_BEHIND = 5;

    /**
     * The Block-Node had an internal error and cannot continue processing.<br/>
     * The Publisher may retry again later.
     */
    STREAM_ITEMS_INTERNAL_ERROR = 6;

    /**
     * The Block-Node failed to store the block persistently.
     * <p>
     * The Publisher SHOULD start a new stream to send the block to
     * this Block-Node, or any other reliable Block-Node.
     * The Publisher MUST NOT discard the block until it is successfully
     * persisted and verified (and acknowledged) by at least one Block-Node.
     */
    STREAM_ITEMS_PERSISTENCE_FAILED = 7;
}

/**
 * A request to read a single block.
 *
 * A client system SHALL send this message to request a single block,
 * including the block state proof.<br/>
 * A client MAY request that the block be sent without verification.
 * A compliant Block-Node MAY respond to requests that allow unverified
 * responses by returning the full requested block before verifying
 * the included block proof.<br/>
 * A compliant Block-Node MAY support _only_ requests that allow unverified
 * blocks, but MUST clearly document that limitation, and MUST respond to
 * a request that does not allow unverified blocks with the
 * `ALLOW_UNVERIFIED_REQUIRED` response code.
 */
message SingleBlockRequest {
    /**
     * The block number of a block to retrieve.
     * <p>
     * The requested block MUST exist on the Block-Node.<br/>
     * This value MUST NOT be set if `retrieve_latest` is set `true`.<br/>
     * This value MUST be set to a valid block number if `retrieve_latest` is
     * unset or is set `false`.
     */
    uint64 block_number = 1;

    /**
     * A flag to indicate that the requested block may be sent without
     * verifying its `BlockProof`.<br/>
     * This might be set by a client that expects to perform its own
     * verification and wishes lower latency or, potentially, lower cost.
     * <p>
     * If this value is set, then the responding Block-Node MAY respond with a
     * block that has not completed verification of its `BlockProof`.<br/>
     * If this is _not_ set then the Block-Node MUST respond with either a
     * fully verified and validated block, or `VERIFIED_BLOCK_UNAVAILABLE` if
     * the requested block is not yet verified.<br/>
     * The default value is _not set_.
     */
    bool allow_unverified = 2;

    /**
     * A flag to request the latest available block.
     * <p>
     * This value MAY be set `true` to request the last block available.<br/>
     * If this value is set to `true` then `block_number` MUST NOT be set and
     * SHALL be ignored.
     */
    bool retrieve_latest = 3;
}

/**
 * A response to a `singleBlock` request.
 *
 * This message SHALL be sent in response to a request, and SHALL contain at
 * least a valid `status`.<br/>
 * If `status` is `READ_BLOCK_SUCCESS`, the response SHALL contain the
 * requested block in the `block` field.
 *
 * > Note
 * >> A block can become quite large. A client MUST be prepared to receive the
 * >> full content of the block, perhaps many megabytes of data.
 */
message SingleBlockResponse {
    /**
     * A response status.
     * <p>
     * The reported status SHALL reflect the success of the request, or
     * a detailed reason the request failed.
     */
    SingleBlockResponseCode status = 1;

    /**
     * The requested block.
     * <p>
     * This container object SHALL hold the entire sequence of block items
     * for the requested block.<br/>
     * The block items in this message SHALL be in the same order
     * as received.<br/>
     * The items in this message SHALL begin with a `BlockHeader` and end with
     * a `BlockStateProof` applicable to this block.
     */
    com.hedera.hapi.block.stream.Block block = 2;
}

/**
 * An enumeration indicating the status of this request.
 */
enum SingleBlockResponseCode {
    /**
     * An "unset value" flag, this value SHALL NOT be used.<br/>
     * This status indicates the server software failed to set a status,
     * and SHALL be considered a software defect.
     */
    READ_BLOCK_UNKNOWN = 0;

    /**
     * The requesting client account lacks sufficient HBAR to pay the
     * service fee for this request.<br/>
     * The client MAY retry the request, but MUST increase the client
     * account balance with this Block-Node before doing so.
     */
    READ_BLOCK_INSUFFICIENT_BALANCE = 1;

    /**
     * The request succeeded.<br/>
     * The requested block SHALL be returned in the `block` field.
     */
    READ_BLOCK_SUCCESS = 2;

    /**
     * The requested block was not found.<br/>
     * Something failed and a block that should be available was
     * not found.
     * <p>
     * The client MAY retry the request; if this result is repeated the
     * request SHOULD be directed to a different Block-Node.
     */
    READ_BLOCK_NOT_FOUND = 3;

    /**
     * The requested block is not available on this Block-Node.
     * <p>
     * The client SHOULD send a `serverStatus` request to determine the
     * lowest and highest block numbers available at this Block-Node.
     */
    READ_BLOCK_NOT_AVAILABLE = 4;

    /**
     * The request for a verified block cannot be fulfilled.<br/>
     * The client requested a verified block from a Block-Node that does not
     * offer verified blocks.
     * <p>
     * The client MAY retry the request with the `allow_unverified` flag set.
     */
    ALLOW_UNVERIFIED_REQUIRED = 5;

    /**
     * The request for a verified block cannot be fulfilled.<br/>
     * The client requested a verified block from a Block-Node but the
     * requested block is not yet verified.
     * <p>
     * The client MAY retry the request after a short delay
     * (typically 2 seconds or more).
     */
    VERIFIED_BLOCK_UNAVAILABLE = 6;
}

/**
 * A request to stream block items from Block-Node to a client.
 *
 * The Block-Node SHALL respond to this request with a stream of
 * `SubscribeStreamResponse` messages.<br/>
 * The Block-Node SHALL stream the full contents of the blocks requested.<br/>
 * The block items SHALL be streamed in order originally produced within
 * a block.<br/>
 * The blocks SHALL be streamed in ascending order by `block_number`.<br/>
 * The Block-Node SHALL end the stream when the last requested block has
 * been sent.<br/>
 * The Block-Node SHALL end the stream with a response code status of SUCCESS
 * when the stream is complete.<br/>
 * The client SHOULD call the `serverStatus` rpc prior to constructing this
 * request to determine the available start and end blocks.
 */
message SubscribeStreamRequest {
    /**
     * A block number to start the stream.
     * <p>
     * This SHALL be the block number of the first block returned.<br/>
     * This field MUST be less than or equal to the latest available
     * block number.
     */
    uint64 start_block_number = 1;

    /**
     * A block number to end the stream.<br/>
     * This is optional, and if not set (0), the stream will be "infinite".
     * <p>
     * This field MAY be zero (`0`) to indicate the stream SHOULD continue
     * indefinitely, streaming new blocks as each becomes available.<br/>
     * If this value is greater than zero (`0`)
     * <ul>
     *   <li>This value SHALL be the number of the last block returned.</li>
     *   <li>This field MUST NOT be less than `start_block_number`.</li>
     *   <li>This SHOULD be a block number that is immediately available
     *       from the Block-Node.</li>
     *   <li>A Block-Node SHALL continue to stream blocks until the last
     *       requested block is transmitted.</li>
     *   <li>A Block-Node MAY reject a request for a block
     *       that is not yet available.</li>
     *   <li>A Block-Node MAY accept future block numbers.</li>
     *   <li>Block-Node implementations MAY charge increased fees for such
     *       "future" streams.</li>
     * </ul>
     */
    uint64 end_block_number = 2;

    /**
     * A flag to indicate that the requested block(s) may be sent before
     * verifying each block's `BlockProof`.<br/>
     * This might be set by a client that expects to perform its own
     * verification and wishes lower latency or, potentially, lower cost.
     * <p>
     * If this value is set, then the responding Block-Node MAY respond with
     * blocks that have not (yet) completed block proof verification.<br/>
     * If this is _not set_ then the Block-Node MUST respond with only
     * fully verified and validated block(s).<br/>
     * If this is _set_, then a Block-Node MAY stream items from
     * blocks that have not yet been verified or do not yet have
     * a block proof available.<br/>
     * The default value is _not set_.
     */
    bool allow_unverified = 3;
}

/**
 * One item in a stream of `subscribeBlockStream` responses.
 *
 * The Block-Node SHALL respond to a `subscribeBlockStream` request with a
 * stream of `SubscribeStreamResponse` messages.<br/>
 * The Block-Node SHALL stream the full contents of the blocks requested.<br/>
 * The block items SHALL be streamed in order originally produced within
 * a block.<br/>
 * The blocks SHALL be streamed in ascending order by `block_number`.<br/>
 * The Block-Node SHALL end the stream when the last requested block has
 * been sent.<br/>
 * The Block-Node SHALL end the stream with a response code status of SUCCESS
 * when the stream is complete.<br/>
 * The Block-Node SHALL end the stream with a response code status of
 * `READ_STREAM_INVALID_START_BLOCK_NUMBER` if the start block number is
 * greater than the end block number.<br/>
 * The Block-Node SHALL end the stream with a response code status of
 * `READ_STREAM_INSUFFICIENT_BALANCE` if insufficient balance remains to
 * complete the requested stream.
 * The Block-Node SHALL make every reasonable effort to fulfill as much of the
 * request as available balance supports, in the event balance is not
 * sufficient to complete the request.
 */
message SubscribeStreamResponse {
    oneof response {
        /**
         * A final response item describing the terminal status of this stream.
         * <p>
         * The Block-Node SHALL end the stream following this message.
         */
        SubscribeStreamResponseCode status = 1;

        /**
         * A stream response item containing one or more `BlockItem`s.
         * <p>
         * The full stream SHALL consist of many `block_items` messages
         * followed by a single `status` message.
         */
        BlockItemSet block_items = 2;
    }
}

/**
* An enumeration indicating the status of this request.
*
* This response code SHALL be the last message in the stream of responses.
* This code SHALL represent the final status of the full request.
*/
enum SubscribeStreamResponseCode {
    /**
     * An "unset value" flag, this value SHALL NOT be used.<br/>
     * This status indicates the server software failed to set a status,
     * and SHALL be considered a software defect.
     */
    READ_STREAM_UNKNOWN = 0;

    /**
     * The requesting client account lacks sufficient HBAR to pay the
     * service fee for this request.
     * <p>
     * The client MAY retry the request, but MUST increase the client
     * account balance with this Block-Node before doing so.
     */
    READ_STREAM_INSUFFICIENT_BALANCE = 1;

    /**
     * The request succeeded.
     * <p>
     * The requested block(s) SHALL precede the status response
     * with this value.
     */
    READ_STREAM_SUCCESS = 2;

    /**
     * The requested start block number is not valid.<br/>
     * The start block number is after the end block number, less
     * than `0`, or otherwise invalid.<br/>
     * The client MAY retry this request, but MUST change the
     * `start_block_number` field to a valid start block.
     */
    READ_STREAM_INVALID_START_BLOCK_NUMBER = 3;

    /**
     * The requested end block number is not valid.<br/>
     * The end block number is greater than the highest current block
     * number, less than `0`, or otherwise invalid.<br/>
     * The client MAY retry this request, but MUST change the
     * `end_block_number` field to a valid end block.
     */
    READ_STREAM_INVALID_END_BLOCK_NUMBER = 4;

    /**
     * The requested stream is not available.<br/>
     * The client MAY retry again later.
     */
    READ_STREAM_NOT_AVAILABLE = 5;
}

/**
 * A request to read a state snapshot.
 *
 * A state snapshot is a full copy of the network state at the completion of a
 * particular block.
 *
 * This request MUST contain a block number that has already reached this
 * Block-Node and completed verification, or request the "latest" snapshot.<br/>
 * This request MAY specify the "latest" snapshot, and the Block-Node SHALL
 * respond with a reference to a snapshot containing the most recent contents
 * of the network state known to that Block-Node.
 */
message StateSnapshotRequest {
    /**
     * A block number.
     * <p>
     * This SHALL be the last block number present in the snapshot
     * returned.<br/>
     * If `retrieve_latest` is set `true` this field SHOULD NOT be set
     * and SHALL be ignored.<br/>
     * A Block-Node MAY reject any request with a non-default
     * value for this field, but MUST clearly document that behavior.
     */
    uint64 last_block_number = 2;

    /**
     * A boolean to request the latest available snapshot.
     * <p>
     * This value MAY be set `true` to request the most recent state snapshot
     * available.<br/>
     * If this value is set to `true` then `last_block_number` SHOULD NOT be
     * set and SHALL be ignored.<br/>
     * A Block-Node MAY reject any request with that does _not_
     * set this field `true`, but MUST clearly document that behavior.
     */
    bool retrieve_latest = 3;
}

/**
 * A response to a request for a state snapshot.
 *
 * This message SHALL deliver a _reference_ to the requested snapshot
 * data if successful.<br/>
 * This message SHALL deliver a code indicating the reason for failure
 * if unsuccessful.
 */
message StateSnapshotResponse {
    /**
     * A status response.
     * <p>
     * This code SHALL indicate a successful call, or the detailed
     * reason for failure.
     */
    StateSnapshotResponseCode status = 1;

    /**
     * A block number.
     * <p>
     * This SHALL be the number of the last block included in this
     * state snapshot.
     */
    uint64 last_block_number = 2;

    /**
     * A reference to where the requested state snapshot may be obtained.
     * <p>
     * <blockquote>REVIEW NOTE<blockquote>
     * This is TEMPORARY.  We have not yet designed how state snapshots may
     * be sent. One idea is to use `Any` and let implementations decide;
     * another is to use a time limited URL (with the same login as the
     * Block-Node server); another is to use a customer-pays cloud
     * storage bucket.
     * </blockquote></blockquote>
     */
    string snapshot_reference = 3;
}

/**
 * An enumeration indicating the status of a StateSnapshotResponse request.
 */
enum StateSnapshotResponseCode {
    /**
     * An "unset value" flag, this value SHALL NOT be used.<br/>
     * This status indicates the server software failed to set a status,
     * and SHALL be considered a software defect.
     */
    STATE_SNAPSHOT_UNKNOWN = 0;

    /**
     * The requesting client account lacks sufficient HBAR to pay the
     * service fee for this request.
     * <p>
     * The client MAY retry the request, but MUST increase the client
     * account balance with this Block-Node before doing so.
     */
    STATE_SNAPSHOT_INSUFFICIENT_BALANCE = 1;

    /**
     * The request succeeded.
     * <p>
     * The full snapshot data MAY be read via the endpoint provided in the
     * `snapshot_reference` field for the duration specified.
     */
    STATE_SNAPSHOT_SUCCESS = 2;
}

/**
 * A request for the status of a Block-Node.
 */
message ServerStatusRequest {}

/**
 * A response to a server status request.
 *
 * This message SHALL provide a client with information needed to successfully
 * query this Block-Node for a block, stream of blocks, or
 * state snapshot.<br/>
 * A request for blocks between `first_available_block` and
 * `last_available_block`, inclusive, SHOULD succeed. Any request for blocks
 * outside that range SHOULD fail.
 */
message ServerStatusResponse {
    /**
     * The lowest numbered block available on this Block-Node.
     * <p>
     * Any request for a block with lower number than this value SHALL fail
     * with a status value indicating and invalid start block number.
     */
    uint64 first_available_block = 1;

    /**
     * The greatest block number available from this Block-Node.
     * <p>
     * Any request for a block with a block number higher than this
     * value MAY fail.
     */
    uint64 last_available_block = 2;

    /**
     * A flag indicating this Block-Node only offers the latest state snapshot.
     * <p>
     * If this value is `true` the client MUST set `retrieve_latest` `true`
     * in any `StateSnapshotRequest` sent to this Block-Node.
     */
    bool only_latest_state = 3;

    /**
     * Version information.<br/>
     * Versions for the block network address book, block stream protocol
     * buffer schema, and Block-Node software.
     */
    BlockNodeVersions version_information = 4;
}

/**
 * Version information for a Block-Node.
 *
 * The `stream_proto_version` SHOULD be an officially released Block Stream
 * version.
 * The `address_book_version` SHALL be determined by networks of Block-Nodes.
 * The `software_version` SHALL be determined by the implementation of this
 * specification.
 */
message BlockNodeVersions {
    /**
     * A version of the Block-Node network address book.<br/>
     * The address book version describes what version of address book
     * this Block-Node holds for discovering and identifying other Block-Nodes.
     * <p>
     * This version SHALL be specific to each "network" of interconnected
     * Block-Nodes.
     */
    proto.SemanticVersion address_book_version = 1;

    /**
     * A version of the Block Stream specification.<br/>
     * This is the Stream version currently supported by this Block-Node.
     * <p>
     * Implementations SHOULD make reasonable effort to ensure the latest
     * released Block Stream version is supported.<br/>
     * This version MUST be an officially released Block Stream version if
     * the responding Block-Node is not private.
     */
    proto.SemanticVersion stream_proto_version = 2;

    /**
     * A version of the Block-Node software.<br/>
     * This is the software version that this Block-Node is currently
     * running.
     * <p>
     * This value is implementation-defined.
     */
    proto.SemanticVersion software_version = 3;
}

/**
 * Remote procedure calls (RPCs) for the Block-Node ancillary services.
 */
service BlockNodeService {
    /**
     * Read the status of this Block-Node.
     * <p>
     * A client SHOULD request server status prior to requesting block stream
     * data or a state snapshot.
     */
    rpc serverStatus(ServerStatusRequest) returns (ServerStatusResponse);
}

/**
 * Remote procedure calls (RPCs) for the Block-Node block services.
 */
service BlockAccessService {
    /**
     * Read a single block from the Block-Node.
     * <p>
     * The request SHALL describe the block number of the block to retrieve.
     */
    rpc singleBlock(SingleBlockRequest) returns (SingleBlockResponse);
}

/**
 * Remote procedure calls (RPCs) for the Block-Node state snapshot
 * and query services.
 */
service StateService {
    /**
     * Read a state snapshot from the Block-Node.
     * <p>
     * The request SHALL describe the last block number present in the
     * snapshot.<br/>
     * Block-Node implementations MAY decline a request for a snapshot older
     * than the latest available, but MUST clearly document this behavior.
     */
    rpc stateSnapshot(StateSnapshotRequest) returns (StateSnapshotResponse);
}

/**
 * Remote procedure calls (RPCs) for the Block-Node stream services.
 */
service BlockStreamService {
    /**
     * Publish a stream of blocks.
     * <p>
     * Each item in the stream MUST contain one `BlockItem`.<br/>
     * Each Block MUST begin with a single `BlockHeader` block item.<br/>
     * The Block-Node SHALL append each `BlockItem` to an internal structure
     * to construct full blocks.<br/>
     * Each Block MUST end with a single `BlockStateProof` block item.<br/>
     * It is RECOMMENDED that the implementations verify the Block using the
     * `BlockStateProof` to validate all data was received correctly.<br/>
     * This API SHOULD, generally, be restricted based on mTLS authentication
     * to a limited set of Publisher (i.e. consensus node) systems.
     */
    rpc publishBlockStream (stream PublishStreamRequest) returns (stream PublishStreamResponse);

    /**
     * Subscribe to a stream of blocks.
     * <p>
     * Each item in the stream SHALL contain one `BlockItem` or a
     * response code.<br/>
     * The request message MUST specify start and end block numbers
     * to return/<br/>
     * The Block-Node SHALL stream the full contents of the blocks
     * requested.<br/>
     * The block items SHALL be streamed in order originally produced within
     * a block.<br/>
     * The blocks shall be streamed in ascending order by `block_number`.<br/>
     * The Block-Node SHALL end the stream when the last requested block,
     * if set, has been sent.<br/>
     * A request with an end block of `0` SHALL be interpreted to indicate the
     * stream has no end. The Block-Node SHALL continue to stream new blocks
     * as soon as each becomes available.<br/>
     * The Block-Node SHALL end the stream with response code containing a
     * status of SUCCESS when the stream is complete.<br/>
     * The Block-Node SHALL end the stream with a response code containing a
     * status of `READ_STREAM_INVALID_START_BLOCK_NUMBER` if the start block
     * number is greater than the end block number.<br/>
     * The Block-Node SHALL end the stream with a response code containing a
     * status of `READ_STREAM_PAYMENT_INSUFFICIENT` if insufficient payment
     * remains to complete the requested stream.<br/>
     * The Block-Node SHALL make every reasonable effort to fulfill as much
     * of the request as possible in the event payment is not sufficient to
     * complete the request.
     */
    rpc subscribeBlockStream(SubscribeStreamRequest) returns (stream SubscribeStreamResponse);
}
